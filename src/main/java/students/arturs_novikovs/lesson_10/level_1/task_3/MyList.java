package students.arturs_novikovs.lesson_10.level_1.task_3;

public interface MyList<E> {
    /**
     * Добавляет элемент в конец списка.
     *
     * @param element элемент, который нужно добавить
     */
    void add(E element);

    /**
     * Вставляет элемент в указанную позицию в списке.
     *
     * @param index   позиция, куда нужно вставить элемент
     * @param element элемент, который нужно вставить
     */
    void add(int index, E element);

    /**
     * Удаляет элемент из списка по индексу.
     *
     * @param index индекс элемента, который нужно удалить
     * @return удаленный элемент
     */
    E remove(int index);

    /**
     * Удаляет первое вхождение указанного элемента из списка.
     *
     * @param element элемент, который нужно удалить
     * @return true, если элемент был успешно удален, false в противном случае
     */
    boolean remove(E element);

    /**
     * Получает элемент из списка по индексу.
     *
     * @param index индекс элемента, который нужно получить
     * @return элемент по указанному индексу
     */
    E get(int index);

    /**
     * Заменяет элемент по указанному индексу на новый элемент.
     *
     * @param index   индекс элемента, который нужно заменить
     * @param element новый элемент
     * @return старый элемент, который был заменен
     */
    E set(int index, E element);

    /**
     * Возвращает количество элементов в списке.
     *
     * @return количество элементов в списке
     */
    int size();

    /**
     * Проверяет, пустой ли список.
     *
     * @return true, если список пуст, false в противном случае
     */
    boolean isEmpty();

    /**
     * Проверяет, содержит ли список указанный элемент.
     *
     * @param element элемент, наличие которого нужно проверить
     * @return true, если список содержит указанный элемент, false в противном случае
     */
    boolean contains(E element);

    /**
     * Очищает список, удаляя все элементы.
     */
    void clear();
}
